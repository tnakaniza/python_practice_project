{"name": "test_transaction_validation", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <Tests.test_banking.TestBanking object at 0x00000262F890D610>, setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d263abb45b1f2faf4d1ad19c78a751f9\")>\n\n    @pytest.mark.tamara\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_transaction_validation(self, setup):\n        \"\"\"Test 3: Deposit, Transaction, Withdraw, and Validate Balance\"\"\"\n        self.driver = setup\n        self.driver.get(self.way2AutomationURL)\n        self.driver.maximize_window()\n        self.login = LoginPage(self.driver)\n        self.customer = CustomerPage(self.driver)\n        self.account = AccountPage(self.driver)\n    \n        try:\n            self.login.login_as_customer()\n            self.customer.select_random_customer()\n            self.customer.click_login_button()\n            self.account.deposit_amount(31459)\n            WebDriverWait(self.driver, 20).until(\n                lambda d: self.account.get_balance() == '31459'\n            )\n            assert self.account.get_balance() == '31459', \"Initial deposit failed\"\n    \n            self.account.open_transactions()\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Transactions Page\",\n                          attachment_type=AttachmentType.PNG)\n    \n            self.account.withdraw_amount(31459)\n            WebDriverWait(self.driver, 20).until(\n                lambda d: self.account.get_balance() == '0'\n            )\n            assert self.account.get_balance() == '0', \"Balance not restored to original\"\n            self.account.open_transactions()\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Final Transaction\",\n                          attachment_type=AttachmentType.PNG)\n    \n            time.sleep(2)\n        except TimeoutException as e:\n            print(f\"TimeoutException encountered: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"TimeoutException\",\n                          attachment_type=AttachmentType.PNG)\n>           raise e  # re-raise exception for reporting\n\nTests\\test_banking.py:151: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nTests\\test_banking.py:128: in test_transaction_validation\n    WebDriverWait(self.driver, 20).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"d263abb45b1f2faf4d1ad19c78a751f9\")>\nmethod = <function TestBanking.test_transaction_validation.<locals>.<lambda> at 0x00000262F8998860>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "description": "Test 3: Deposit, Transaction, Withdraw, and Validate Balance", "attachments": [{"name": "TimeoutException", "source": "2066cb5a-ac80-42f5-956e-00e4d8852edb-attachment.png", "type": "image/png"}], "start": 1730334175379, "stop": 1730334202343, "uuid": "f7fb9ff7-c72f-4464-a4d1-2b1ea266a052", "historyId": "ec6ba57d6daec6d95af04e059fb21983", "testCaseId": "ec6ba57d6daec6d95af04e059fb21983", "fullName": "Tests.test_banking.TestBanking#test_transaction_validation", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "tamara"}, {"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "test_banking"}, {"name": "subSuite", "value": "TestBanking"}, {"name": "host", "value": "DESKTOP-400OCEN"}, {"name": "thread", "value": "28108-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_banking"}]}