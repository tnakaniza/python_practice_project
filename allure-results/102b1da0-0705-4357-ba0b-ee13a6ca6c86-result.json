{"name": "test_login_deposit_all_accounts", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: invalid locator\n  (Session info: chrome=129.0.6668.100)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6832AB095+29557]\n\t(No symbol) [0x00007FF68321FA50]\n\t(No symbol) [0x00007FF6830DB56A]\n\t(No symbol) [0x00007FF68312EE02]\n\t(No symbol) [0x00007FF68312F8EC]\n\t(No symbol) [0x00007FF68317B777]\n\t(No symbol) [0x00007FF6831571CF]\n\t(No symbol) [0x00007FF68317851C]\n\t(No symbol) [0x00007FF683156F33]\n\t(No symbol) [0x00007FF68312116F]\n\t(No symbol) [0x00007FF6831222D1]\n\tGetHandleVerifier [0x00007FF6835DC96D+3378253]\n\tGetHandleVerifier [0x00007FF683628497+3688311]\n\tGetHandleVerifier [0x00007FF68361D1CB+3642539]\n\tGetHandleVerifier [0x00007FF68336A6B6+813462]\n\t(No symbol) [0x00007FF68322AB5F]\n\t(No symbol) [0x00007FF683226B74]\n\t(No symbol) [0x00007FF683226D10]\n\t(No symbol) [0x00007FF683215C1F]\n\tBaseThreadInitThunk [0x00007FF8666C7374+20]\n\tRtlUserThreadStart [0x00007FF867AFCC91+33]", "trace": "self = <Tests.test_banking.TestBanking object at 0x000001EDD4FFC9B0>, setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"cf6934ee3a5106e19dc8d034d616f7d7\")>\n\n    @pytest.mark.nakani\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_login_deposit_all_accounts(self, setup):\n        self.driver = setup\n        self.login = LoginPage(self.driver)\n        self.customer = CustomerPage(self.driver)\n        self.account = AccountPage(self.driver)\n    \n        \"\"\"Test 2: Deposit into all accounts and validate.\"\"\"\n        try:\n            self.driver.get(self.way2AutomationURL)\n            self.driver.maximize_window()\n    \n            # Login as Customer\n            self.login.login_as_customer()\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Login Page Test 2\",\n                          attachment_type=AttachmentType.PNG)\n    \n            # ToDO : Sort out random_customer Method\n    \n            self.customer.select_random_customer()\n            self.customer.click_login_button()\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Cust Page Test 2\",\n                          attachment_type=AttachmentType.PNG)\n    \n>           account_numbers = self.account.get_all_account_numbers()  # get all account Numbers\n\nTests\\test_banking.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\account_page.py:95: in get_all_account_numbers\n    acc_dropdown_list = self.driver.find_element(self.account_select_id)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001EDD4FFD430>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: invalid locator\\\\n  (Sessi...07FF683215C1F]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8666C7374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF867AFCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: invalid locator\nE         (Session info: chrome=129.0.6668.100)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6832AB095+29557]\nE       \t(No symbol) [0x00007FF68321FA50]\nE       \t(No symbol) [0x00007FF6830DB56A]\nE       \t(No symbol) [0x00007FF68312EE02]\nE       \t(No symbol) [0x00007FF68312F8EC]\nE       \t(No symbol) [0x00007FF68317B777]\nE       \t(No symbol) [0x00007FF6831571CF]\nE       \t(No symbol) [0x00007FF68317851C]\nE       \t(No symbol) [0x00007FF683156F33]\nE       \t(No symbol) [0x00007FF68312116F]\nE       \t(No symbol) [0x00007FF6831222D1]\nE       \tGetHandleVerifier [0x00007FF6835DC96D+3378253]\nE       \tGetHandleVerifier [0x00007FF683628497+3688311]\nE       \tGetHandleVerifier [0x00007FF68361D1CB+3642539]\nE       \tGetHandleVerifier [0x00007FF68336A6B6+813462]\nE       \t(No symbol) [0x00007FF68322AB5F]\nE       \t(No symbol) [0x00007FF683226B74]\nE       \t(No symbol) [0x00007FF683226D10]\nE       \t(No symbol) [0x00007FF683215C1F]\nE       \tBaseThreadInitThunk [0x00007FF8666C7374+20]\nE       \tRtlUserThreadStart [0x00007FF867AFCC91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidArgumentException"}, "attachments": [{"name": "Login Page Test 2", "source": "17b31a5e-2f19-4bc9-865a-63fed6d9f728-attachment.png", "type": "image/png"}, {"name": "Cust Page Test 2", "source": "1c601878-39cc-4fc9-b6e6-8435876010b2-attachment.png", "type": "image/png"}], "start": 1730329162619, "stop": 1730329172889, "uuid": "df3f05b1-0757-4fbc-baf5-4dc1df1ba2c6", "historyId": "05a8f08da0a592af38fdc75317e74f82", "testCaseId": "05a8f08da0a592af38fdc75317e74f82", "fullName": "Tests.test_banking.TestBanking#test_login_deposit_all_accounts", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "nakani"}, {"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "test_banking"}, {"name": "subSuite", "value": "TestBanking"}, {"name": "host", "value": "DESKTOP-400OCEN"}, {"name": "thread", "value": "24340-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_banking"}]}