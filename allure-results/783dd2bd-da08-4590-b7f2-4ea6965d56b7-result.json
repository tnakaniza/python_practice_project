{"name": "test_login_deposit_all_accounts", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=129.0.6668.100)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7CC48B095+29557]\n\t(No symbol) [0x00007FF7CC3FFA50]\n\t(No symbol) [0x00007FF7CC2BB399]\n\t(No symbol) [0x00007FF7CC310B0F]\n\t(No symbol) [0x00007FF7CC30354E]\n\t(No symbol) [0x00007FF7CC33718A]\n\t(No symbol) [0x00007FF7CC302E86]\n\t(No symbol) [0x00007FF7CC3373A0]\n\t(No symbol) [0x00007FF7CC35851C]\n\t(No symbol) [0x00007FF7CC336F33]\n\t(No symbol) [0x00007FF7CC30116F]\n\t(No symbol) [0x00007FF7CC3022D1]\n\tGetHandleVerifier [0x00007FF7CC7BC96D+3378253]\n\tGetHandleVerifier [0x00007FF7CC808497+3688311]\n\tGetHandleVerifier [0x00007FF7CC7FD1CB+3642539]\n\tGetHandleVerifier [0x00007FF7CC54A6B6+813462]\n\t(No symbol) [0x00007FF7CC40AB5F]\n\t(No symbol) [0x00007FF7CC406B74]\n\t(No symbol) [0x00007FF7CC406D10]\n\t(No symbol) [0x00007FF7CC3F5C1F]\n\tBaseThreadInitThunk [0x00007FF8666C7374+20]\n\tRtlUserThreadStart [0x00007FF867AFCC91+33]", "trace": "self = <Tests.test_banking.TestBanking object at 0x00000269B53AD430>, setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e7aaf074f4ff2c3d62f14f4994b03fb8\")>\n\n    @pytest.mark.tamara\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_login_deposit_all_accounts(self, setup):\n        self.driver = setup\n        self.login = LoginPage(self.driver)\n        self.customer = CustomerPage(self.driver)\n        self.account = AccountPage(self.driver)\n    \n        \"\"\"Test 2: Deposit into all accounts and validate.\"\"\"\n        try:\n            self.driver.get(self.way2AutomationURL)\n            self.driver.maximize_window()\n    \n            # Login as Customer\n            self.login.login_as_customer()\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Login Page Test 2\",\n                          attachment_type=AttachmentType.PNG)\n    \n            # ToDO : Sort out random_customer Method\n    \n            self.customer.select_random_customer()\n            self.customer.click_login_button()\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Cust Page Test 2\",\n                          attachment_type=AttachmentType.PNG)\n    \n            account_numbers = self.account.get_all_account_numbers()  # get all account Numbers\n    \n            # Iterate through each account to deposit and validate\n            for account_number in account_numbers:\n                self.account.select_account_by_number(account_number)\n                print(f\"customer: {account_number}\")\n                self.account.deposit_amount(1500)\n    \n                # Validate deposit was successful\n                # current_balance = self.account.get_balance()\n                # assert current_balance == 1500, f\"Deposit failed for account {account_number}\"\n    \n                # Attach screenshot for each deposit\n                allure.attach(self.driver.get_screenshot_as_png(),\n                              name=f\"Deposit Successful for Account {account_number}\",\n                              attachment_type=AttachmentType.PNG)\n    \n        except TimeoutException as e:\n            print(f\"Exception occurred: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"TimeoutException\",\n                          attachment_type=AttachmentType.PNG)\n>           raise e\n\nTests\\test_banking.py:104: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nTests\\test_banking.py:79: in test_login_deposit_all_accounts\n    self.customer.click_login_button()\nPages\\customer_page.py:43: in click_login_button\n    customer_login_btn_Element = wait.until(EC.visibility_of_element_located((By.XPATH, self.login_btn_xpath)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"e7aaf074f4ff2c3d62f14f4994b03fb8\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x00000269B47D72E0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Tests.test_banking.TestBanking object at 0x00000269B53AD430>, setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e7aaf074f4ff2c3d62f14f4994b03fb8\")>\n\n    @pytest.mark.tamara\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_login_deposit_all_accounts(self, setup):\n        self.driver = setup\n        self.login = LoginPage(self.driver)\n        self.customer = CustomerPage(self.driver)\n        self.account = AccountPage(self.driver)\n    \n        \"\"\"Test 2: Deposit into all accounts and validate.\"\"\"\n        try:\n            self.driver.get(self.way2AutomationURL)\n            self.driver.maximize_window()\n    \n            # Login as Customer\n            self.login.login_as_customer()\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Login Page Test 2\",\n                          attachment_type=AttachmentType.PNG)\n    \n            # ToDO : Sort out random_customer Method\n    \n            self.customer.select_random_customer()\n            self.customer.click_login_button()\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Cust Page Test 2\",\n                          attachment_type=AttachmentType.PNG)\n    \n            account_numbers = self.account.get_all_account_numbers()  # get all account Numbers\n    \n            # Iterate through each account to deposit and validate\n            for account_number in account_numbers:\n                self.account.select_account_by_number(account_number)\n                print(f\"customer: {account_number}\")\n                self.account.deposit_amount(1500)\n    \n                # Validate deposit was successful\n                # current_balance = self.account.get_balance()\n                # assert current_balance == 1500, f\"Deposit failed for account {account_number}\"\n    \n                # Attach screenshot for each deposit\n                allure.attach(self.driver.get_screenshot_as_png(),\n                              name=f\"Deposit Successful for Account {account_number}\",\n                              attachment_type=AttachmentType.PNG)\n    \n        except TimeoutException as e:\n            print(f\"Exception occurred: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"TimeoutException\",\n                          attachment_type=AttachmentType.PNG)\n            raise e\n    \n        finally:\n>           self.account.logout()\n\nTests\\test_banking.py:107: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\account_page.py:74: in logout\n    self.driver.find_element(By.CSS_SELECTOR, \"button[ng-click='byebye()']\").click()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000269B54482F0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF7CC3F5C1F]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8666C7374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF867AFCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=129.0.6668.100)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7CC48B095+29557]\nE       \t(No symbol) [0x00007FF7CC3FFA50]\nE       \t(No symbol) [0x00007FF7CC2BB399]\nE       \t(No symbol) [0x00007FF7CC310B0F]\nE       \t(No symbol) [0x00007FF7CC30354E]\nE       \t(No symbol) [0x00007FF7CC33718A]\nE       \t(No symbol) [0x00007FF7CC302E86]\nE       \t(No symbol) [0x00007FF7CC3373A0]\nE       \t(No symbol) [0x00007FF7CC35851C]\nE       \t(No symbol) [0x00007FF7CC336F33]\nE       \t(No symbol) [0x00007FF7CC30116F]\nE       \t(No symbol) [0x00007FF7CC3022D1]\nE       \tGetHandleVerifier [0x00007FF7CC7BC96D+3378253]\nE       \tGetHandleVerifier [0x00007FF7CC808497+3688311]\nE       \tGetHandleVerifier [0x00007FF7CC7FD1CB+3642539]\nE       \tGetHandleVerifier [0x00007FF7CC54A6B6+813462]\nE       \t(No symbol) [0x00007FF7CC40AB5F]\nE       \t(No symbol) [0x00007FF7CC406B74]\nE       \t(No symbol) [0x00007FF7CC406D10]\nE       \t(No symbol) [0x00007FF7CC3F5C1F]\nE       \tBaseThreadInitThunk [0x00007FF8666C7374+20]\nE       \tRtlUserThreadStart [0x00007FF867AFCC91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "attachments": [{"name": "Login Page Test 2", "source": "68dd6c35-b575-4363-b78f-34cca1a81e3a-attachment.png", "type": "image/png"}, {"name": "TimeoutException", "source": "5699780a-0965-4602-865d-4655324122e6-attachment.png", "type": "image/png"}], "start": 1730385267709, "stop": 1730385292972, "uuid": "9d963bc4-047c-47f6-846a-821b5e046aa6", "historyId": "05a8f08da0a592af38fdc75317e74f82", "testCaseId": "05a8f08da0a592af38fdc75317e74f82", "fullName": "Tests.test_banking.TestBanking#test_login_deposit_all_accounts", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "tamara"}, {"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "test_banking"}, {"name": "subSuite", "value": "TestBanking"}, {"name": "host", "value": "DESKTOP-400OCEN"}, {"name": "thread", "value": "21736-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_banking"}]}