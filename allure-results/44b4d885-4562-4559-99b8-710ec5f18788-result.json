{"name": "test_transaction_validation", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=129.0.6668.100); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF6428AB095+29557]\n\t(No symbol) [0x00007FF64281FA50]\n\t(No symbol) [0x00007FF6426DB56A]\n\t(No symbol) [0x00007FF6426E213E]\n\t(No symbol) [0x00007FF6426E44B7]\n\t(No symbol) [0x00007FF6426E4570]\n\t(No symbol) [0x00007FF6427317AB]\n\t(No symbol) [0x00007FF6427307E7]\n\t(No symbol) [0x00007FF64272354E]\n\t(No symbol) [0x00007FF64275718A]\n\t(No symbol) [0x00007FF642722E86]\n\t(No symbol) [0x00007FF6427573A0]\n\t(No symbol) [0x00007FF64277851C]\n\t(No symbol) [0x00007FF642756F33]\n\t(No symbol) [0x00007FF64272116F]\n\t(No symbol) [0x00007FF6427222D1]\n\tGetHandleVerifier [0x00007FF642BDC96D+3378253]\n\tGetHandleVerifier [0x00007FF642C28497+3688311]\n\tGetHandleVerifier [0x00007FF642C1D1CB+3642539]\n\tGetHandleVerifier [0x00007FF64296A6B6+813462]\n\t(No symbol) [0x00007FF64282AB5F]\n\t(No symbol) [0x00007FF642826B74]\n\t(No symbol) [0x00007FF642826D10]\n\t(No symbol) [0x00007FF642815C1F]\n\tBaseThreadInitThunk [0x00007FF8666C7374+20]\n\tRtlUserThreadStart [0x00007FF867AFCC91+33]", "trace": "self = <Tests.test_banking.TestBanking object at 0x000001FAFE53EF90>, setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"fe8b1c76d13ffdb1db6b4f7445aae690\")>\n\n    @pytest.mark.tamara\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_transaction_validation(self, setup):\n        \"\"\"Test 3: Deposit, Transaction, Withdraw, and Validate Balance\"\"\"\n        self.driver = setup\n        self.driver.get(self.way2AutomationURL)\n        self.driver.maximize_window()\n        self.login = LoginPage(self.driver)\n        self.customer = CustomerPage(self.driver)\n        self.account = AccountPage(self.driver)\n    \n        try:\n            self.login.login_as_customer()\n            self.customer.select_random_customer()\n            self.customer.click_login_button()\n            self.account.deposit_amount(31459)\n            # WebDriverWait(self.driver, 20).until(\n            #     lambda d: self.account.get_balance() == '31459'\n            # )\n            #assert self.account.get_balance() == '31459', \"Initial deposit failed\"\n    \n            self.account.open_transactions()\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Transactions Page\",\n                          attachment_type=AttachmentType.PNG)\n    \n>           self.account.withdraw_amount(31459)\n\nTests\\test_banking.py:137: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\account_page.py:48: in withdraw_amount\n    self.driver.find_element(By.CSS_SELECTOR, \"button[ng-click='withdrawl()']\").click()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001FAFE5DF9B0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...07FF642815C1F]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8666C7374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF867AFCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=129.0.6668.100); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6428AB095+29557]\nE       \t(No symbol) [0x00007FF64281FA50]\nE       \t(No symbol) [0x00007FF6426DB56A]\nE       \t(No symbol) [0x00007FF6426E213E]\nE       \t(No symbol) [0x00007FF6426E44B7]\nE       \t(No symbol) [0x00007FF6426E4570]\nE       \t(No symbol) [0x00007FF6427317AB]\nE       \t(No symbol) [0x00007FF6427307E7]\nE       \t(No symbol) [0x00007FF64272354E]\nE       \t(No symbol) [0x00007FF64275718A]\nE       \t(No symbol) [0x00007FF642722E86]\nE       \t(No symbol) [0x00007FF6427573A0]\nE       \t(No symbol) [0x00007FF64277851C]\nE       \t(No symbol) [0x00007FF642756F33]\nE       \t(No symbol) [0x00007FF64272116F]\nE       \t(No symbol) [0x00007FF6427222D1]\nE       \tGetHandleVerifier [0x00007FF642BDC96D+3378253]\nE       \tGetHandleVerifier [0x00007FF642C28497+3688311]\nE       \tGetHandleVerifier [0x00007FF642C1D1CB+3642539]\nE       \tGetHandleVerifier [0x00007FF64296A6B6+813462]\nE       \t(No symbol) [0x00007FF64282AB5F]\nE       \t(No symbol) [0x00007FF642826B74]\nE       \t(No symbol) [0x00007FF642826D10]\nE       \t(No symbol) [0x00007FF642815C1F]\nE       \tBaseThreadInitThunk [0x00007FF8666C7374+20]\nE       \tRtlUserThreadStart [0x00007FF867AFCC91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: StaleElementReferenceException"}, "description": "Test 3: Deposit, Transaction, Withdraw, and Validate Balance", "attachments": [{"name": "Transactions Page", "source": "88a2bb0d-3f6f-494a-a909-82a3e475f92b-attachment.png", "type": "image/png"}], "start": 1730335005644, "stop": 1730335011899, "uuid": "d5732b3d-0187-4cfd-9706-05dbd7d58a85", "historyId": "ec6ba57d6daec6d95af04e059fb21983", "testCaseId": "ec6ba57d6daec6d95af04e059fb21983", "fullName": "Tests.test_banking.TestBanking#test_transaction_validation", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "tamara"}, {"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "test_banking"}, {"name": "subSuite", "value": "TestBanking"}, {"name": "host", "value": "DESKTOP-400OCEN"}, {"name": "thread", "value": "1284-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_banking"}]}