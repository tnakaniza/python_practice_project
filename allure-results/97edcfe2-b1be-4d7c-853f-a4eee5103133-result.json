{"name": "test_login_deposit_all_accounts", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <Tests.test_banking.TestBanking object at 0x0000018C4C07C530>, setup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"781ddbc1a6299b13a541b2c26d7fde12\")>\n\n    @pytest.mark.nakani\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_login_deposit_all_accounts(self, setup):\n        self.driver = setup\n        self.login = LoginPage(self.driver)\n        self.customer = CustomerPage(self.driver)\n        self.account = AccountPage(self.driver)\n    \n        \"\"\"Test 2: Deposit into all accounts and validate.\"\"\"\n        try:\n            self.driver.get(self.way2AutomationURL)\n            self.driver.maximize_window()\n    \n            # Login as Customer\n            self.login.login_as_customer()\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Login Page Test 2\",\n                          attachment_type=AttachmentType.PNG)\n    \n            # ToDO : Sort out random_customer Method\n    \n            self.customer.select_random_customer()\n            self.customer.click_login_button()\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Cust Page Test 2\",\n                          attachment_type=AttachmentType.PNG)\n    \n            account_numbers = self.account.get_all_account_numbers()  # get all account Numbers\n    \n            # Iterate through each account to deposit and validate\n            for account_number in account_numbers:\n                self.account.select_account_by_number(account_number)\n                print(f\"customer: {account_number}\")\n                self.account.deposit_amount(1500)\n    \n                # Validate deposit was successful\n                current_balance = self.account.get_balance()\n                assert current_balance == '1500', f\"Deposit failed for account {account_number}\"\n    \n                # Attach screenshot for each deposit\n                allure.attach(self.driver.get_screenshot_as_png(),\n                              name=f\"Deposit Successful for Account {account_number}\",\n                              attachment_type=AttachmentType.PNG)\n            self.account.logout()\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"Logout Page\",\n                          attachment_type=allure.attachment_type.PNG)\n    \n        except TimeoutException as e:\n            print(f\"Exception occurred: {e}\")\n            allure.attach(self.driver.get_screenshot_as_png(), name=\"TimeoutException\",\n                          attachment_type=AttachmentType.PNG)\n>           raise e\n\nTests\\test_banking.py:107: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nTests\\test_banking.py:79: in test_login_deposit_all_accounts\n    self.customer.click_login_button()\nPages\\customer_page.py:43: in click_login_button\n    customer_login_btn_Element = wait.until(EC.visibility_of_element_located((By.XPATH, self.login_btn_xpath)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"781ddbc1a6299b13a541b2c26d7fde12\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x0000018C4BE84720>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "attachments": [{"name": "Login Page Test 2", "source": "98db9a73-885f-4e70-b2a9-ab99bff91ec9-attachment.png", "type": "image/png"}, {"name": "TimeoutException", "source": "0890d262-8fad-4e3d-91ad-dd07080f219a-attachment.png", "type": "image/png"}], "start": 1730328732365, "stop": 1730328764576, "uuid": "0f238195-e708-4439-8bec-c3b321ec153f", "historyId": "05a8f08da0a592af38fdc75317e74f82", "testCaseId": "05a8f08da0a592af38fdc75317e74f82", "fullName": "Tests.test_banking.TestBanking#test_login_deposit_all_accounts", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "nakani"}, {"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "test_banking"}, {"name": "subSuite", "value": "TestBanking"}, {"name": "host", "value": "DESKTOP-400OCEN"}, {"name": "thread", "value": "12264-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.test_banking"}]}